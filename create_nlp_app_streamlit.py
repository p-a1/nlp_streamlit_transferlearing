# -*- coding: utf-8 -*-
"""Create NLP App Streamlit.ipynb

Automatically generated by Colab.

# 📚 Lab 3: Create NLP App with 3 Hugging Face Models (Streamlit Version)
"""

# ✨ Install Required Libraries
# !pip install streamlit transformers torch

# ✨ Import Required Libraries

import streamlit as st
from transformers import pipeline

# ✨ Load Hugging Face Pipelines
# 1. Text Generation Pipeline (gpt2)
text_generator = pipeline("text-generation", model="openai-community/gpt2") #gpt

# 2. Summarization Pipeline (default model)
summarizer = pipeline("summarization")

# 3. Translation Pipeline (English ➔ French)
translator = pipeline("translation_en_to_fr")
questions = pipeline("question-answering", model="deepset/roberta-base-squad2")

# ✨ Create the Streamlit App

# Title
st.title(" NLP App using 4 Hugging Face Models ")

# Instruction
st.write("Start with a short topic and let's work in four steps: Generate text about it ➔ Summarize ➔ Translate ➔ Have Questions")

# User input
user_input = st.text_area(" Write a topic: ")
done=False
# Button to process
if st.button("Start processing..."):
    if user_input.strip() != "":
        with st.spinner("Wait ...!⏳"):

            # Step 1: Generate Text
            generated_output = text_generator(user_input, max_length=100, num_return_sequences=1)
            generated_text = generated_output[0]['generated_text']
            st.subheader("🔹generated_text: ")
            st.write(generated_text)

            # Step 2: Summarize the Generated Text
            summarized_output = summarizer(generated_text, max_length=50, min_length=25, do_sample=False)
            summarized_text = summarized_output[0]['summary_text']
            st.subheader("🔹 summary_text: ")
            st.write(summarized_text)

            # Step 3: Translate the Summarized Text
            translated_output = translator(summarized_text)
            translated_text = translated_output[0]['translation_text']
            st.subheader("🔹 translation_text to fr: ")
            st.write(translated_text)
            done=True

    else:
        st.warning("⚠️ try text first")

user_input = st.text_area(" Write a Question: ")
if st.button("Answering..."):
    if user_input.strip() != "":
        with st.spinner('Wait...'):
            out=questions(question=user_input, context=translated_text)
            st.subheader("The Answer")
            st.write(out)

    else:
        st.warning("⚠️ try text first")
            
            

